{"ast":null,"code":"var _jsxFileName = \"/Users/kalyankumarkonduru/Desktop/Portfolio/my-portfolio/src/context/ThemeContext.js\",\n  _s = $RefreshSig$();\n// src/context/ThemeContext.js\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the theme context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Check if dark mode preference is stored in localStorage\n  const storedTheme = localStorage.getItem('theme');\n  const prefersDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n  // Initialize state based on stored preference or system preference\n  const [isDarkMode, setIsDarkMode] = useState(storedTheme ? storedTheme === 'dark' : prefersDarkMode);\n\n  // Theme colors for light and dark modes\n  const theme = {\n    isDarkMode,\n    // Dark mode colors\n    dark: {\n      background: '#0a192f',\n      secondaryBg: '#112240',\n      text: '#ccd6f6',\n      secondaryText: '#8892b0',\n      accent: '#ed6d0b',\n      highlight: '#64ffda',\n      cardBg: '#112240',\n      navBackground: 'rgba(10, 25, 47, 0.85)'\n    },\n    // Light mode colors\n    light: {\n      background: '#f8f8f8',\n      secondaryBg: '#ffffff',\n      text: '#333333',\n      secondaryText: '#555555',\n      accent: '#ed6d0b',\n      highlight: '#2a9d8f',\n      cardBg: '#ffffff',\n      navBackground: 'rgba(248, 248, 248, 0.85)'\n    },\n    // Current colors based on mode\n    colors: {},\n    // Toggle function\n    toggleTheme: () => {\n      setIsDarkMode(!isDarkMode);\n    }\n  };\n\n  // Update colors object based on current mode\n  theme.colors = isDarkMode ? theme.dark : theme.light;\n\n  // Update localStorage and apply body class when theme changes\n  useEffect(() => {\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    document.body.className = isDarkMode ? 'dark-theme' : 'light-theme';\n\n    // Apply background color to body for smooth transitions\n    document.body.style.backgroundColor = theme.colors.background;\n    document.body.style.color = theme.colors.text;\n\n    // Add transition for smooth color changes\n    document.body.style.transition = 'background-color 0.5s ease, color 0.5s ease';\n  }, [isDarkMode, theme.colors.background, theme.colors.text]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: theme,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"U5DIGxUp8F8/aZIhHJfkkV6cCms=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","storedTheme","localStorage","getItem","prefersDarkMode","window","matchMedia","matches","isDarkMode","setIsDarkMode","theme","dark","background","secondaryBg","text","secondaryText","accent","highlight","cardBg","navBackground","light","colors","toggleTheme","setItem","document","body","className","style","backgroundColor","color","transition","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kalyankumarkonduru/Desktop/Portfolio/my-portfolio/src/context/ThemeContext.js"],"sourcesContent":["// src/context/ThemeContext.js\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the theme context\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  // Check if dark mode preference is stored in localStorage\n  const storedTheme = localStorage.getItem('theme');\n  const prefersDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  \n  // Initialize state based on stored preference or system preference\n  const [isDarkMode, setIsDarkMode] = useState(\n    storedTheme ? storedTheme === 'dark' : prefersDarkMode\n  );\n\n  // Theme colors for light and dark modes\n  const theme = {\n    isDarkMode,\n    // Dark mode colors\n    dark: {\n      background: '#0a192f',\n      secondaryBg: '#112240',\n      text: '#ccd6f6',\n      secondaryText: '#8892b0',\n      accent: '#ed6d0b',\n      highlight: '#64ffda',\n      cardBg: '#112240',\n      navBackground: 'rgba(10, 25, 47, 0.85)',\n    },\n    // Light mode colors\n    light: {\n      background: '#f8f8f8',\n      secondaryBg: '#ffffff',\n      text: '#333333',\n      secondaryText: '#555555',\n      accent: '#ed6d0b',\n      highlight: '#2a9d8f',\n      cardBg: '#ffffff',\n      navBackground: 'rgba(248, 248, 248, 0.85)',\n    },\n    // Current colors based on mode\n    colors: {},\n    // Toggle function\n    toggleTheme: () => {\n      setIsDarkMode(!isDarkMode);\n    }\n  };\n\n  // Update colors object based on current mode\n  theme.colors = isDarkMode ? theme.dark : theme.light;\n\n  // Update localStorage and apply body class when theme changes\n  useEffect(() => {\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n    document.body.className = isDarkMode ? 'dark-theme' : 'light-theme';\n    \n    // Apply background color to body for smooth transitions\n    document.body.style.backgroundColor = theme.colors.background;\n    document.body.style.color = theme.colors.text;\n    \n    // Add transition for smooth color changes\n    document.body.style.transition = 'background-color 0.5s ease, color 0.5s ease';\n  }, [isDarkMode, theme.colors.background, theme.colors.text]);\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACjD,MAAMC,eAAe,GAAGC,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;;EAEtG;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAC1CQ,WAAW,GAAGA,WAAW,KAAK,MAAM,GAAGG,eACzC,CAAC;;EAED;EACA,MAAMM,KAAK,GAAG;IACZF,UAAU;IACV;IACAG,IAAI,EAAE;MACJC,UAAU,EAAE,SAAS;MACrBC,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAE,SAAS;MACfC,aAAa,EAAE,SAAS;MACxBC,MAAM,EAAE,SAAS;MACjBC,SAAS,EAAE,SAAS;MACpBC,MAAM,EAAE,SAAS;MACjBC,aAAa,EAAE;IACjB,CAAC;IACD;IACAC,KAAK,EAAE;MACLR,UAAU,EAAE,SAAS;MACrBC,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAE,SAAS;MACfC,aAAa,EAAE,SAAS;MACxBC,MAAM,EAAE,SAAS;MACjBC,SAAS,EAAE,SAAS;MACpBC,MAAM,EAAE,SAAS;MACjBC,aAAa,EAAE;IACjB,CAAC;IACD;IACAE,MAAM,EAAE,CAAC,CAAC;IACV;IACAC,WAAW,EAAEA,CAAA,KAAM;MACjBb,aAAa,CAAC,CAACD,UAAU,CAAC;IAC5B;EACF,CAAC;;EAED;EACAE,KAAK,CAACW,MAAM,GAAGb,UAAU,GAAGE,KAAK,CAACC,IAAI,GAAGD,KAAK,CAACU,KAAK;;EAEpD;EACA1B,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACqB,OAAO,CAAC,OAAO,EAAEf,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;IAC5DgB,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAGlB,UAAU,GAAG,YAAY,GAAG,aAAa;;IAEnE;IACAgB,QAAQ,CAACC,IAAI,CAACE,KAAK,CAACC,eAAe,GAAGlB,KAAK,CAACW,MAAM,CAACT,UAAU;IAC7DY,QAAQ,CAACC,IAAI,CAACE,KAAK,CAACE,KAAK,GAAGnB,KAAK,CAACW,MAAM,CAACP,IAAI;;IAE7C;IACAU,QAAQ,CAACC,IAAI,CAACE,KAAK,CAACG,UAAU,GAAG,6CAA6C;EAChF,CAAC,EAAE,CAACtB,UAAU,EAAEE,KAAK,CAACW,MAAM,CAACT,UAAU,EAAEF,KAAK,CAACW,MAAM,CAACP,IAAI,CAAC,CAAC;EAE5D,oBACElB,OAAA,CAACC,YAAY,CAACkC,QAAQ;IAACC,KAAK,EAAEtB,KAAM;IAAAX,QAAA,EACjCA;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACpC,EAAA,CAhEWF,aAAa;AAAAuC,EAAA,GAAbvC,aAAa;AAkE1B,eAAeA,aAAa;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}